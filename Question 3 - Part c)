"""

run_rou.py
--------------

This code discretizes a Markov Chain using Rouwenhorst's Method and simulates it.

"""

#%% Imports.

import matplotlib.pyplot as plt
import numpy as np

#%% Discretize AR(1).

mu = 0.50000 # Intercept.
gamma = 0.85000 # Persistence.
sigma = 1.00000 # Std. dev. of error term.
N = 7 # Number of states.

ar = {'rou': rouwenhorst_ar1} # Method.
ar_y = {} # Container.
ar_pi = {} # Container.

ar_y['rou'], ar_pi['rou'] = ar['rou'](mu, gamma, sigma, N)

del mu, gamma, sigma, N

#%% Simulate the AR(1)'s based on discretized processes.

seed = 2025 # Seed for random number.
T = 50 # Time horizon.

sim = {}

# Simulate the Markov Chain.
for i in ar_y.keys():
    np.random.seed(seed)
    sim["ar_" + i] = simulate(ar_y[i], ar_pi[i], T)

del seed

#%% Plot the time series.

time = range(0, T) # X-axis.

# Plot.
for i in sim:
    plt.figure()
    plt.plot(time,np.squeeze(sim[i]))
    plt.xlabel('Time')
    plt.ylabel('Y')
    plt.title("AR(1): " + i)
    plt.show()

del i

#%% Re-estimate the AR(1) series using simulated data.

big1 = np.ones((T-1, 1)) # Intercept.
bhat = {} # Container.

# Estimate the coefficents using the simulated Markov Chain.
for i in sim:
    y = np.expand_dims(sim[i][0, 1:T],axis = 1)
    x  = np.expand_dims(sim[i][0, 0:T-1], axis = 1)
    bigX = np.concatenate((big1, x), axis = 1)
    bhat[i] = np.linalg.inv(bigX.T@bigX)@bigX.T@y

del i, T, ar, x, y, big1, bigX
