from scipy.stats import norm
import numpy as np
from numpy import count_nonzero,expand_dims,linspace,tile

def rouwenhorst_ar1(mu, gamma, sigma, N):
    """
    This function discretizes an AR(1) process using Rouwenhorst’s method.
            y(t) = mu + gamma*y(t-1) + eps(t), eps(t) ~ NID(0,sigma^2)

    Input:
        mu    : Intercept of AR(1).
        gamma   : Persistence of AR(1).
        sigma : Standard deviation of error term.
        N     : Number of states.

    Output:
        y    : Grid for the AR(1) process.
        pmat : Transition probability matrix.
    """

    #%% Construct equally spaced grid using Rouwenhorst’s method.
    ar_mean = mu/(1 - gamma)  # The mean of a stationary AR(1) process is mu/(1 - rho)
    ar_sd = sigma*(np.sqrt((N - 1)/(1 - gamma**2))) # The std. dev of a stationary AR(1) process is sigma/sqrt(1-rho^2)

    # Rouwenhorst's standard deviation for the grid spacing
    y1 = ar_mean - ar_sd
    yn = ar_mean + ar_sd

    # Create the grid with N equally spaced points
    y = linspace(y1,yn,N,endpoint=True) # Equally spaced grid. Include endpoint (endpoint=True) and record stepsize, d (retstep=True).

    #%% Construct the transition probability matrix for the process.
    # Transition matrix for N = 2
    p = (1 - gamma)/2
    pmat_2 = np.array([[p, 1 - p],
                       [1 - p, p]])

    if N == 2:
        return y, pmat_2
    else:
        for n in range(3, N + 1):
            p_old = pmat_2
            # Recursive transition matrix construction for N > 2
            pmat_N = p * np.block([[p_old, np.zeros((p_old.shape[0], 1))],
                                   [np.zeros((1, p_old.shape[1] + 1))]]) \
                   + (1 - p) * np.block([[np.zeros((p_old.shape[0], 1)), p_old],
                                         [np.zeros((1, p_old.shape[1] + 1))]]) \
                   + (1 - p) * np.block([[np.zeros((1, p_old.shape[1] + 1))],
                                         [p_old, np.zeros((p_old.shape[0], 1))]]) \
                   + p * np.block([[np.zeros((1, p_old.shape[1] + 1))],
                                   [np.zeros((p_old.shape[0], 1)), p_old]])

            # Normalize rows (divide all rows except the first and the last by 2 to account for double counting, so the probabilities sum to one)
            pmat_N[1:-1, :] /= 2

            # Update for next iteration
            pmat_2 = pmat_N

    #%% Output
    y = expand_dims(y, axis=0) # Convert 0-dimensional array to a row vector.

    if count_nonzero(pmat_2.sum(axis = 1) < 0.999) > 0:
        raise Exception("Some columns of transition matrix don't sum to 1.")

    return y,pmat_2

mu = 0.50000 # Intercept.
gamma = 0.85000 # Persistence.
sigma = 1.00000 # Std. dev. of error term.
N = 7 # Number of states.

rouwenhorst_ar1(mu, gamma, sigma, N)
